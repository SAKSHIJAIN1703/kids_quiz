{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neetu\\\\knowledge-quiz-version2\\\\src\\\\components\\\\quizGeography\\\\QuizGeography.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { StQuizGeography } from './QuizGeographyStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizGeography = () => {\n  _s();\n\n  const [datas, setDatas] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const navigate = useNavigate();\n  const URL = 'http://localhost:8000/geography';\n\n  const getDatas = async () => {\n    const response = await fetch(URL);\n    const quiz = await response.json();\n    setDatas(quiz);\n  }; // to get the datas\n\n\n  useEffect(() => {\n    getDatas();\n  }, []); // handle the answer button\n\n  const handleAnswerButton = isCorrect => {\n    if (isCorrect === true) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < datas.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  }; // refresh page\n\n\n  const refreshPage = () => {\n    window.location.reload(false);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {datas && datas.length>0 && (\n    //     <p>{datas[2].questionText}</p>\n    //   )}\n    // </div>\n    _jsxDEV(StQuizGeography, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quizContainer\",\n        children: [datas && !showScore && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"quizQuestionNumber\",\n            children: [\"Question \", currentQuestion + 1, \" / \", datas.length, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"quizLine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"quizQuestion\",\n            children: datas[currentQuestion].questionText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quizButtonContainer\",\n            children: datas[currentQuestion].answerOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAnswerButton(option.isCorrect),\n              children: option.answerText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), showScore && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"showScore\",\n            children: [\"You scored \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"showScore__number\",\n              children: score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 53\n            }, this), \"/\", datas.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: refreshPage,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonOtherCat\",\n            onClick: () => navigate('/welcome'),\n            children: \"Other Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttonStopPlaying\",\n            onClick: () => navigate('/'),\n            children: \"Stop Playing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  );\n};\n\n_s(QuizGeography, \"WifKkRjOs13wpXbJgZTngfoVCNc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = QuizGeography;\nexport default QuizGeography;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizGeography\");","map":{"version":3,"sources":["C:/Users/neetu/knowledge-quiz-version2/src/components/quizGeography/QuizGeography.jsx"],"names":["React","useState","useEffect","useNavigate","StQuizGeography","QuizGeography","datas","setDatas","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","navigate","URL","getDatas","response","fetch","quiz","json","handleAnswerButton","isCorrect","nextQuestion","length","refreshPage","window","location","reload","questionText","answerOptions","map","option","answerText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { StQuizGeography } from './QuizGeographyStyle'; \n\nconst QuizGeography = () => {\n  const [datas, setDatas] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  \n  const navigate = useNavigate();\n\n  const URL = 'http://localhost:8000/geography';\n  const getDatas = async () => {\n    const response = await fetch(URL);\n    const quiz = await response.json();\n    setDatas(quiz);\n  };\n\n   // to get the datas\n\tuseEffect(() => {\n\t\tgetDatas()\n\t},[]);\n\n\n  // handle the answer button\n  const handleAnswerButton = (isCorrect) => {\n    if(isCorrect === true) { setScore(score + 1) }\n\n    const nextQuestion = currentQuestion + 1\n    if(nextQuestion < datas.length) {\n      setCurrentQuestion(nextQuestion)\n    } else { setShowScore(true) }\n  }\n\n  // refresh page\n  const refreshPage = () => {\n    window.location.reload(false);\n  }\n \n \n\n  return (\n    // <div>\n    //   {datas && datas.length>0 && (\n    //     <p>{datas[2].questionText}</p>\n    //   )}\n    // </div>\n      <StQuizGeography>\n        <div className='quizContainer'>\n          {datas && !showScore && (\n            <>\n              <p className='quizQuestionNumber'>Question {currentQuestion + 1} / {datas.length}.</p>\n              <span className='quizLine'></span>\n              <p className='quizQuestion'>{datas[currentQuestion].questionText}</p>\n              <div className='quizButtonContainer'>\n                {datas[currentQuestion].answerOptions.map(option => (\n                  <button onClick={()=>handleAnswerButton(option.isCorrect)}>{option.answerText}</button>\n                ))}\n              </div>\n            </>\n          ) }\n\n           {showScore && (\n             <>\n              <div className='showScore'>You scored <span className='showScore__number'>{score}</span>/{datas.length}</div>\n              <button onClick={refreshPage}>Play Again</button>\n              <button className='buttonOtherCat' onClick={() =>navigate('/welcome') }>Other Categories</button>\n              <button className='buttonStopPlaying' onClick={() =>navigate('/') }>Stop Playing</button>\n             </>\n          )}\n\n        </div>\n        \n      </StQuizGeography>\n  )\n};\n\nexport default QuizGeography;\n"]},"metadata":{},"sourceType":"module"}